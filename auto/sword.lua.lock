

local HANDS = true


local Spring = require("lib.spring")
local Tween  = require("lib.tween")

local Trail  = require("lib.trail")

models.sword.anchor.handle.glow:setPrimaryRenderType("EMISSIVE_SOLID")
models.sword:setVisible(false)

---@class GNSword
---@field model ModelPart
---@field handle ModelPart
---
---@field vel Vector3
---@field pos Vector3
---@field dir Vector3
---@field dirVel Vector3
---
---@field inBlock boolean
---@field pierce number
---
---@field target Vector3
---@field targetDir Vector3
local GNSword = {}
GNSword.__index = GNSword


local side2dir = {
	["north"] = vectors.vec3(0, 0, -1),
	["east"]  = vectors.vec3(1, 0, 0),
	["south"] = vectors.vec3(0, 0, 1),
	["west"]  = vectors.vec3(-1, 0, 0),
	["up"]    = vectors.vec3(0, 1, 0),
	["down"]  = vectors.vec3(0, -1, 0),
}


---@type GNSword[]
local swords = {}
local isActive = false

local TRAIL_SUBDIVISION = 5

local id = 0
function GNSword.new()
	id = id + 1
	local model = models.sword:copy("Sword" .. id):setParentType("WORLD"):setVisible(true)
	models:addChild(model)

	local self = setmetatable({
		model = model.anchor,
		handle = model.anchor.handle,

		springPos = Spring.newVec3(0.5, 0.2, 0),
		springDir = Spring.newVec3(),

		ldir = vec(0, 0, 0),
		dir = vec(0, 0, 0),
		dirVel = vec(0, 0, 0),

		inBlock = false,
		pierce = 0,

		piercePos = vec(0, 0, 0),
		pierceDir = vec(0, 0, 0),

	}, GNSword)
	if HANDS then
		self.hand = Trail:newTwoLeadTrail(textures["textures.trail1"]):setDuration(TRAIL_SUBDIVISION + 1)
		:setDivergeness(0.1):setRenderType("BLURRY")
	end


	model.postRender = function(delta, context, part)
		local dir = math.lerp(self.springDir.pos + self.springPos.vel * (isActive and 0.1 or -0.1), -self.pierceDir, self.pierce)
		local fpos = math.lerp(self.springPos.pos,
			self.piercePos + self.pierceDir * math.sin(self.pierce * math.pi) * 2, self.pierce)
		--local dir = vec(0,1,0):cross(-self.springPos.vel):normalize() + self.springPos.vel:normalized()
		model
			 :setPos(fpos * 16)
			 :setRot(180 - math.deg(math.atan2(dir.xz:length(), dir.y)),
				 -90 - math.deg(math.atan2(dir.z, dir.x)))
		model.anchor.handle:setRot(0, 0, 0)

		if player:isLoaded() and HANDS then
			local ppos = player:getPos(delta):add(0, 1, 0)
			local pdir = player:getLookDir().x_z:normalize() ---@cast pdir Vector3
			local diff = (ppos - fpos):normalize()
			local len = (ppos - fpos):length()
			local cpos = client:getCameraPos()
			for i = 0, TRAIL_SUBDIVISION, 1 do
				local j = i / TRAIL_SUBDIVISION
				local p = math.lerp(
					math.lerp(ppos, ppos - pdir, j),
					math.lerp(fpos - dir * len * 3 - diff * 2, fpos - dir * 0.8, j),
					j)
					local o = ((cpos - p)):cross(dir):normalized() * 0.25
					self.hand:setLeads(p - o, p + o)
				self.hand.uvShift = self.hand.uvShift + 0.005
			end
		end

		self.springDir.pos:normalize()
	end

	swords[id] = self
	return self
end

local attack = keybinds:fromVanilla("key.pickItem")

function GNSword:free()
	self.model:remove()
	swords[id] = nil
end

local sword1 = GNSword.new()

events.ENTITY_INIT:register(function()
	sword1.springPos.pos = player:getPos()
end)




events.TICK:register(function()
	if not isActive then
		local dir = player:getLookDir().x_z:normalize() ---@cast dir Vector3

		sword1.springPos.target = player:getPos() - dir + vec(0, 1, 0)
		sword1.springDir.target = vec(0, -1, 0) - dir * 0.5
	end
end)


local function setActive(toggle,pos,dir)
	if isActive ~= toggle then
		isActive = toggle

		if toggle then
			local block = world.getBlockState(pos-dir*0.1)
			local surfaceDir = dir
			sword1.piercePos = pos
			sword1.pierceDir = surfaceDir
			sword1.springPos.target = pos
			sword1.springPos.vel = vec((math.random() - 0.5), (math.random() - 0.5), (math.random() - 0.5)) *
			5 + surfaceDir * 10

			Tween.new({
				id = "sword1",
				from = 0,
				to = 1,
				duration = 0.5,
				easing = "inQuad",
				tick = function(p) ---@cast p number
					sword1.pierce = p
				end,
				onFinish = function()
					local soundIDs = block:getSounds()
					sounds[soundIDs["break"]]:pos(pos):pitch(0.75):play()
					sounds[soundIDs.hit]:pos(pos):play()
					if block:hasCollision() then
						for i = 1, 32, 1 do
							particles:newParticle("minecraft:block " .. block.id, pos + surfaceDir * 0.2)
						end
					end
				end,
			})
		else
			Tween.new({
				id = "sword1",
				from = sword1.pierce,
				to = 0,
				duration = 0.5,
				easing = "inOutQuad",
				tick = function(p) ---@cast p number
					sword1.pierce = p
				end,
			})
			sword1.springDir.pos = sword1.pierceDir
			sword1.springPos.pos = sword1.piercePos
		end
	end
end

function pings.poke(pos,dir)
	if pos then
		pos = vec(client.uuidToIntArray(pos)).xyz/8
		dir = vec(client.uuidToIntArray(dir)).xyz
	end
	setActive(pos and true or false,pos,dir)
	
end

if not host:isHost() then return end

attack.press = function(modifiers, self)
	if not isActive then
		local ppos = player:getPos():add(0, player:getEyeHeight())
		local block, pos, side = raycast:block(ppos, ppos + player:getLookDir() * 20)
		local dir = side2dir[side]
		pings.poke(
		client.intUUIDToString(pos.x * 8, pos.y * 8, pos.z * 8, 0),
		client.intUUIDToString(dir.x, dir.y, dir.z, 0)
		)
	else
		pings.poke()
	end
end

events.RENDER:register(function (delta, ctx, matrix)
	sword1.hand:setRenderType(ctx == "FIRST_PERSON" and "NONE" or "BLURRY")
	--sword1.model:setVisible(ctx ~= "FIRST_PERSON")
end)

return GNSword
